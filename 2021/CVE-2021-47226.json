{
	"cve": {
		"CVE_data_meta": {
			"ASSIGNER": "cve@kernel.org",
			"ID": "CVE-2021-47226"
		},
		"data_format": "MITRE",
		"data_type": "CVE",
		"data_version": "4.0",
		"description": {
			"description_data": [
				{
					"lang": "en",
					"value": "In the Linux kernel, the following vulnerability has been resolved:\n\nx86/fpu: Invalidate FPU state after a failed XRSTOR from a user buffer\n\nBoth Intel and AMD consider it to be architecturally valid for XRSTOR to\nfail with #PF but nonetheless change the register state.  The actual\nconditions under which this might occur are unclear [1], but it seems\nplausible that this might be triggered if one sibling thread unmaps a page\nand invalidates the shared TLB while another sibling thread is executing\nXRSTOR on the page in question.\n\n__fpu__restore_sig() can execute XRSTOR while the hardware registers\nare preserved on behalf of a different victim task (using the\nfpu_fpregs_owner_ctx mechanism), and, in theory, XRSTOR could fail but\nmodify the registers.\n\nIf this happens, then there is a window in which __fpu__restore_sig()\ncould schedule out and the victim task could schedule back in without\nreloading its own FPU registers. This would result in part of the FPU\nstate that __fpu__restore_sig() was attempting to load leaking into the\nvictim task's user-visible state.\n\nInvalidate preserved FPU registers on XRSTOR failure to prevent this\nsituation from corrupting any state.\n\n[1] Frequent readers of the errata lists might imagine \"complex\n    microarchitectural conditions\"."
				}
			]
		},
		"problemtype": {
			"problemtype_data": [
				{}
			]
		},
		"references": {
			"reference_data": [
				{
					"name": "https://git.kernel.org/stable/c/002665dcba4bbec8c82f0aeb4bd3f44334ed2c14",
					"url": "https://git.kernel.org/stable/c/002665dcba4bbec8c82f0aeb4bd3f44334ed2c14"
				},
				{
					"name": "https://git.kernel.org/stable/c/002665dcba4bbec8c82f0aeb4bd3f44334ed2c14",
					"url": "https://git.kernel.org/stable/c/002665dcba4bbec8c82f0aeb4bd3f44334ed2c14"
				},
				{
					"name": "https://git.kernel.org/stable/c/a7748e021b9fb7739e3cb88449296539de0b6817",
					"url": "https://git.kernel.org/stable/c/a7748e021b9fb7739e3cb88449296539de0b6817"
				},
				{
					"name": "https://git.kernel.org/stable/c/a7748e021b9fb7739e3cb88449296539de0b6817",
					"url": "https://git.kernel.org/stable/c/a7748e021b9fb7739e3cb88449296539de0b6817"
				},
				{
					"name": "https://git.kernel.org/stable/c/d8778e393afa421f1f117471144f8ce6deb6953a",
					"url": "https://git.kernel.org/stable/c/d8778e393afa421f1f117471144f8ce6deb6953a"
				},
				{
					"name": "https://git.kernel.org/stable/c/d8778e393afa421f1f117471144f8ce6deb6953a",
					"url": "https://git.kernel.org/stable/c/d8778e393afa421f1f117471144f8ce6deb6953a"
				}
			]
		}
	},
	"impact": {},
	"configurations": {
		"CVE_data_version": "4.0"
	},
	"lastModifiedDate": "2024-11-21T06:35Z",
	"publishedDate": "2024-05-21T15:15Z"
}
